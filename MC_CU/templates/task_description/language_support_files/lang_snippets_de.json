{

	"Instr_Typ_cap":	[	"Der opcode repr\\\"asentiert die Instruktion, rs und rt die Quellregister (\"`source\"'), rd das Zielregister (\"`destination\"') und funct einen Befehl f\\\"ur die ALU. Das Ergebnis der ALU wird in dem durch rd angegebenen Zielregister (\"`destination\"') gespeichert.\\\\ \n",

					"Der opcode repr\\\"asentiert die Instruktion und address einen Teil einer 32 Bit langen Adresse. Diese 32 Bit Adresse wird wie folgt gebildet: Die 4 h\\\"ochstwertigsten Bit entsprechen den ersten 4 Bit des Befehlsz\\\"ahlers (PC-Wert). Darauf folgt die 26 Bit Adresse (address) aus der J-type Instruktion und die zwei niederwertigsten Bit der 32 Bit Adresse werden auf 0 gesetzt.\\\\ \n",

					"Der opcode repr\\\"asentiert die Instruktion, rs ein Quellregister (\"`source\"') und IMM einen Wert f\\\"ur die direkte Weiterverarbeitung (\"`immediate value\"'). Die Verwendung von rt h\\\"angt von der jeweiligen Instruktion ab (siehe Details unten).\\\\ \n"
				],


	"instruction_names":	[	"add",
	               			"sub",
	               			"and",
	               			"or",
	               			"xor",
	               			"nor",
	               			"slt",
	              			"j",
	               			"lw",
	               			"sw",
	               			"addi",
	               			"beq",
	               			"bne"
				],


	"instruction_table_text":	[	"add         & 000000 & 100000 & R  \\\\",
						"sub         & 000000 & 100010 & R  \\\\",
					 	"and         & 000000 & 100100 & R  \\\\",
					 	"or          & 000000 & 100101 & R  \\\\",
					 	"xor         & 000000 & 100110 & R  \\\\",
					 	"nor         & 000000 & 100111 & R  \\\\",
					 	"slt         & 000000 & 101010 & R  \\\\",
					 	"j           & 000010 &    -   & J  \\\\",
					 	"lw          & 100011 &    -   & I  \\\\",
					 	"sw          & 101011 &    -   & I  \\\\",
					 	"addi        & 001000 &    -   & I  \\\\",
					 	"beq         & 000100 &    -   & I  \\\\",
					 	"bne         & 000101 &    -   & I  \\\\"
					],

	"ALUControls":	[	"000        & add \\\\",
		   		"010        & sub \\\\",
		   		"100        & and \\\\",
		   		"101        & or  \\\\",
		   		"110        & xor \\\\",
		   		"111        & nor \\\\",
		   		"001        & slt \\\\"
			],


	"instruction_text":	[	"Diese Instruktion f\\\"uhrt eine ALU Operation mit zwei Registerwerten aus und speichert das Ergebnis in ein Register. Die Instruktion ben\\\"otigt 2 Taktzyklen. Zuerst werden die durch rs und rt angegebenen Register in die ALU geladen und der ALU wird gleichzeitig das Steuersignal %instruction_name gesendet. %slt_explanation Das ben\\\"otigte Steuersignal f\\\"ur die ALU finden Sie in Tabelle~1. Im n\"achsten Taktzyklus wird das ALU Ergebnis in das durch rd angegebene Register gespeichert.",

					"Diese Instruktion f\\\"uhrt einen unbedingten Sprung zu der in der Instruktion angegebenen Adresse durch. Dies dauert einen Taktzyklus. W\\\"ahrend dieses Taktzyklus werden die Bits 25 -- 0 der Instruktion um 2 Bit nach links geschoben. Die resultierenden 28 Bit werden als die Bits 27 -- 0 gemeinsam mit den Bits 31 -- 28 des alten Befehlsz\\\"ahlers (PC-Wert) zu dem neuen PC-Wert kombiniert.",

					"Diese Instruktion l\\\"adt ein Datenwort vom Datenspeicher \"`Data memory\"' in die Register. Dies dauert 3 Taktzyklen. Zuerst wird die Leseadresse des Datenspeichers mittels einer Addition in der ALU bestimmt. Die Operanden f\\\"ur die ALU sind der Wert des in rs angegebenen Registers und der IMM-Wert aus den Bits 15 -- 0 der Instruktion. W\\\"ahrend des zweiten Taktzyklus wird das Ergebnis der ALU vom Datenspeicher als Leseadresse \"`Address\"' verwendet. Im dritten Taktzyklus werden die aus dem Datenspeicher gelesenen Daten in das durch rt angegebene Register gespeichert.",

					"Diese Instruktion speichert ein Datenwort aus den Registern in den Datenspeicher. Dies dauert 2 Taktzyklen. Zuerst wird die Speicheradresse des Datenspeichers mittels einer Addition in der ALU bestimmt. Die Operanden f\\\"ur die ALU sind der Wert des in rs angegebenen Registers und der IMM-Wert aus den Bits 15 -- 0 der Instruktion. W\\\"ahrend des zweiten Taktzyklus wird das Ergebnis der ALU als Schreibadresse \"`Address\"' f\\\"ur den Datenspeicher verwendet. Die zu speichernden Daten kommen aus dem in rt angegebenen Register",

					"Diese Instruktion f\\\"uhrt mittels der ALU eine Addition eines Registerwerts mit einem IMM-Wert aus. Dies dauert 2 Taktzyklen. Zuerst wird der Wert des in rs angegeben Registers mit dem IMM-Wert der Instruktion in der ALU addiert. Im zweiten Taktzyklus wird das Ergebnis der ALU in jenem Register gespeichert, welches in rt angegeben ist.",

					"Diese Instruktion vergleicht zwei Register und zweigt bei Gleicheit zu einer neuen Adresse ab, welche von dem IMM-Wert der Instruktion abh\\\"angig ist. Dieser Vorgang dauert nur einen Taktzyklus, wobei - wie zuvor erkl\\\"art - die Adresse des neuen Zweigs (\"`Branch\"') bereits w\\\"ahrend der Decodierung vorbereitet werden muss. In dem Taktzyklus nach der Decodierung der beq-Instruktion werden die in rs und rt angegebenen Register mittels eine Subtraktion in der ALU auf Gleichheit \\\"uberpr\\\"uft. Wenn das Ergebnis der ALU Null ist, dann wird der \"`Zero\"' Ausgang auf '1' gesetzt. Das Steuerwerk (\"`Control Unit\"') besitzt eine asynchrone Logik und setzt das PCWrite Signal sofort auf '1', wenn das Zero Flag w\\\"ahrend der beq-Instruktion '1' ist. Dadurch wird ein neuer Wert in das PC Register geschrieben und dies f\\\"uhrt somit zu einer Abzweigung auf eine neue Adresse.",

					"Diese Instruktion vergleicht zwei Register und zweigt bei Ungleichheit zu einer neuen Adresse ab, welche von dem IMM-Wert der Instruktion abh\\\"angig ist. Dieser Vorgang dauert nur einen Taktzyklus, wobei - wie zuvor erkl\\\"art - die Adresse des neuen Zweigs (\"`Branch\"') bereits w\\\"ahrend der Decodierung vorbereitet werden muss. In dem Taktzyklus nach der Decodierung der bne-Instruktion werden die in rs und rt angegebenen Register mittels eine Subtraktion in der ALU auf Gleichheit \\\"uberpr\\\"uft. Wenn das Ergebnis der ALU Null ist, dann wird der \"`Zero\"' Ausgang auf '1' gesetzt. Das Steuerwerk (\"`Control Unit\"') besitzt eine asynchrone Logik und setzt das PCWrite Signal sofort auf '1', wenn das Zero Flag w\\\"ahrend der bne-Instruktion nicht '1' ist. Dadurch wird ein neuer Wert in das PC Register geschrieben und dies f\\\"uhrt somit zu einer Abzweigung auf eine neue Adresse."

				],


	"Instr_Text_helpers": 	[	 "Das slt ALUControl Signal vergleicht die zwei ALU Operanden und setzt das ALU Result Register auf '1', wenn rs $<$ rt erf\\\"ullt ist. Anderenfalls ist das Result Register '0'.",
					"Da die Instruktion eine ",
					"beq/bne",
					"beq",
					"bne",
					" Instruktion sein k\\\"onnte, welche zu einem neuen Zweig (\"`Branch\"') mit einem neuen PC-Wert f\\\"uhrt, muss der neue Wert bereits w\\\"ahrend des Decodier-Taktzyklus vorberechnet werden. Dies bedeutet, dass schon w\\\"ahrend der Decodierung der aktuelle PC-Wert mit dem potentiellen IMM-Wert der Instruktion in der ALU addiert werden muss. Der IMM-Wert muss davor um 2 Bit nach links geschoben werden. Durch die Addition ist die neue Zweigadresse (neuer PC-Wert) in jenem Register verf\\\"ugbar, welches das Ergebnis der ALU speichert."
				]
}
