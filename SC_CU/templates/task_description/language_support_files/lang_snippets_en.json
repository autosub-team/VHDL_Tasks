{

	"Instr_Typ_cap":	[	"With the opcode representing the instruction, rs and rt the source registers and rd the destination register and funct representing a function for the ALU. The R-type instruction processes the two source registers in the ALU. The ALU result is saved in the destination register specified by rd.",
					"With the opcode representing the instruction, rs a source register and IMM the immediate value. The usage of rt depends on the instruction, see below for details.",
					"With the opcode representing the instruction and the address being part of a 32 bit address. The 32 bit address is constructed by using the first four bits of the program counter as most significant bits, concatenating the 26 bit address from the J-type instruction and setting the two least significant bits to 0."
				],

	"Instr":	[	"add & 000000 & 100000 & - & R  \\\\ ",
				"sub & 000000 & 100010 & - & R  \\\\ ",
				"and & 000000 & 100100 & - & R  \\\\ ",
				"or  & 000000 & 100101 & - & R  \\\\ ",
				"xor & 000000 & 100110 & - & R  \\\\ ",
				"nor & 000000 & 100111 & - & R  \\\\ ",
				"slt & 000000 & 101010 & - & R  \\\\ ",
				"lw  & 100011 &    -   & - & I  \\\\ ",
				"sw  & 101011 &    -   & - & I  \\\\ ",
				"j   & 000010 &    -   & - & J  \\\\ ",
				"beq & 000100 &    -   &0/1& I  \\\\ ",
				"nothing",
				"bne & 000101 &    -   &0/1& I  \\\\ ",
				"nothing"
			],

	"ALUControls":	[	"000        & add \\\\ ",
				"010        & sub \\\\ ",
				"100        & and \\\\ ",
				"101        & or  \\\\ ",
				"110        & xor \\\\ ",
				"111        & nor \\\\ ",
				"001        & slt \\\\ "
			],

	"Instr_Text": 	[	"add",
				"sub",
				"AND",
				"OR",
				"XOR",
				"NOR",
				"The slt (set on less than) instruction uses the ALU to compare two register values. The result is stored in the destination register. The control signal for the ALU can be found in Table~1. ",
				"The lw instruction loads data from a memory address to a register. The memory address is calculated by adding a base address to the immediate value from the instruction. The base address is retrieved from the register specified in rs. The loaded data is stored in the register specified in rt. ",
				"The sw instruction stores data from the register specified in rt in a memory address. The address is calculated by adding a base address to the immediate value from the instruction. The base address is retrieved from the register specified in rs. ",
				"The j instruction jumps to the address specified in the instruction. ",
				"The beq instruction initiates a branch to a new PC value only if the ALU flags its two input register values as equal. The input registers are specified in rs and rt. The new PC value is calculated by adding the PC value and the immediate value of the instruction. Before adding the immediate value it is extendend from 16 to 32 bits and shiftet to the left by two bits. The ALU checks for equality by subtracting its input values and setting the Zero flag on equality. ",
				"nothing",
				"The bne instruction initiates a branch to a new PC value only if the ALU flags its two input register values as unequal. The input registers are specified in rs and rt. The new PC value is calculated by adding the PC value and the immediate value of the instruction. Before adding the immediate value it is extendend from 16 to 32 bits and shifted to the left by two bits. The ALU checks for equality by subtracting its input values and setting the Zero flag on equality. "
			],


	"Instr_Text_helpers": 	[	"The ",
					", ",
					" and ",
					" instruction uses the ALU to process two register values. The result is stored in the destination register. See Table~1 to find the respective control signal for the ALU. ",
					"The required control signals for the ALU can be found in Table~1. \n"
				]
}
