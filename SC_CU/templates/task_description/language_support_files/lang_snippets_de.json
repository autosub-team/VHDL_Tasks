{

	"Instr_Typ_cap":	[	"Der opcode repr\\\"asentiert die Instruktion, rs und rt die Quellregister (\"`source\"'), rd das Zielregister (\"`destination\"') und funct einen Befehl f\\\"ur die ALU. Das Ergebnis der ALU wird in dem durch rd angegebenen Zielregister (\"`destination\"') gespeichert.",
					"Der opcode repr\\\"asentiert die Instruktion, rs ein Quellregister (\"`source\"') und IMM einen Wert f\\\"ur die direkte Weiterverarbeitung (\"`immediate value\"'). Die Verwendung von rt h\\\"angt von der jeweiligen Instruktion ab (siehe Details unten).",
					"Der opcode repr\\\"asentiert die Instruktion und address einen Teil einer 32 Bit langen Adresse. Diese 32 Bit Adresse wird wie folgt gebildet: Die 4 h\\\"ochstwertigsten Bit entsprechen den ersten 4 Bit des Befehlsz\\\"ahlers (PC). Darauf folgt die 26 Bit Adresse (address) aus der J-type Instruktion und die zwei niederwertigsten Bit der 32 Bit Adresse werden auf 0 gesetzt."
				],

	"Instr":	[	"add & 000000 & 100000 & - & R  \\\\ ",
				"sub & 000000 & 100010 & - & R  \\\\ ",
				"and & 000000 & 100100 & - & R  \\\\ ",
				"or  & 000000 & 100101 & - & R  \\\\ ",
				"xor & 000000 & 100110 & - & R  \\\\ ",
				"nor & 000000 & 100111 & - & R  \\\\ ",
				"slt & 000000 & 101010 & - & R  \\\\ ",
				"lw  & 100011 &    -   & - & I  \\\\ ",
				"sw  & 101011 &    -   & - & I  \\\\ ",
				"j   & 000010 &    -   & - & J  \\\\ ",
				"beq & 000100 &    -   &0/1& I  \\\\ ",
				"(leer)",
				"bne & 000101 &    -   &0/1& I  \\\\ ",
				"(leer)"
			],

	"ALUControls":	[	"000        & add \\\\ ",
				"010        & sub \\\\ ",
				"100        & and \\\\ ",
				"101        & or  \\\\ ",
				"110        & xor \\\\ ",
				"111        & nor \\\\ ",
				"001        & slt \\\\ "
			],

	"Instr_Text": 	[	"add",
				"sub",
				"AND",
				"OR",
				"XOR",
				"NOR",
				"Die stl Instruktion (\"`set on less than\"') verwendet die ALU, um zwei Register miteinander zu vergleichen. Das Ergebnis wird im Zielregister gespeichert. Das ben\\\"otigte Steuersignal f\\\"ur die ALU finden Sie in Tabelle~1. ",
				"Die lw Instruktion l\\\"adt Daten von einer Speicheradresse in ein Register. Die Speicheradresse wird berechnet, indem eine Basisadresse zu dem IMM Wert (\"`immediate value\"') der Instruktion addiert wird. Die Basisadresse wird aus jenem Register abgerufen, welches in rs angegeben ist. Die geladenen Daten werden anschlie\"send in dem Register gespeichert, welches in rt angegeben ist. ",
				"Die sw Instruktion speichert Daten aus einem Register, welches in rt festgelegt ist, an eine Speicheradresse. Die Adresse wird berechnet, indem eine Basisadresse zu dem IMM Wert (\"`immediate value\"') der Instruktion addiert wird. Die Basisadresse wird aus jenem Register abgerufen, welches in rs angegeben ist. ",
				"Die j Instruktion springt zu jener Adresse, welcher in der Instruktion angegeben ist. ",
				"Die beq Instruktion leitet eine Abzweigung (\"`Branch\"') zu einem neuen PC Wert ein. Dies geschieht jedoch nur, wenn die ALU ihre beiden Eingangsregister als gleich kennzeichnet. Die Eingangsregister sind durch rs und rt angegeben. Der neue Wert des Befehlsz\\\"ahlers (PC) entspricht der Addition aus dem alten PC Wert und dem IMM Wert der Instruktion. Vor der Addition wird der IMM Wert von 16 auf 32 Bit erweitert und um 2 Bits nach links geschoben. Die ALU \\\"uberpr\\\"uft die Gleichheit ihrer Eing\\\"ange durch eine Subtraktion der beiden Werte und dem Setzen des Zero Flags bei einer \\\"Ubereinstimmung. ",
				"(leer)",
				"Die bne Instruktion leitet eine Abzweigung (\"`Branch\"') zu einem neuen PC Wert ein. Dies geschieht jedoch nur, wenn die ALU ihre beiden Eingangsregister als ungleich kennzeichnet. Die Eingangsregister sind durch rs und rt angegeben. Der neue Wert des Befehlsz\\\"ahlers (PC) entspricht der Addition aus dem alten PC Wert und dem IMM Wert der Instruktion. Vor der Addition wird der IMM Wert von 16 auf 32 Bit erweitert und um 2 Bits nach links geschoben. Die ALU \\\"uberpr\\\"uft die Gleichheit ihrer Eing\\\"ange durch eine Subtraktion der beiden Werte und dem Setzen des Zero Flags bei einer \\\"Ubereinstimmung. "
			],


	"Instr_Text_helpers": 	[	"Der ",
					", ",
					" und ",
					" Befehl verwendet die ALU, um zwei Registerwerte zu verarbeiten. Das Ergebnis soll in dem Zielregister gespeichert werden. Verwenden Sie Tabelle~1, um das entsprechende Steuersignal f\\\"ur die ALU zu ermitteln. ",
					"Das ben\\\"otigte Steuersignal f\\\"ur die ALU finden Sie in Tabelle~1. \n"
				]
}
